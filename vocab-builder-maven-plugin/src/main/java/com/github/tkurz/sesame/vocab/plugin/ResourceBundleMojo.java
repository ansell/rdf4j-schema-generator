/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.tkurz.sesame.vocab.plugin;

import com.github.tkurz.sesame.vocab.GenerationException;
import com.github.tkurz.sesame.vocab.VocabBuilder;
import org.apache.maven.model.Resource;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.openrdf.model.util.GraphUtilException;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Properties;

/**
 *
 */
@Mojo(name = "generate-bundles",
        defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
        requiresDependencyResolution = ResolutionScope.COMPILE,
        requiresProject = true)
public class ResourceBundleMojo extends AbstractVocabularyBuilderMojo {

    @Parameter(property = "createResourceBundles", defaultValue = "false")
    private boolean createResourceBundles;

    private boolean outputDirAdded = false;

    protected void executeBuilder(String displayName, Vocabulary vocab, VocabBuilder builder, String className) throws IOException, GraphUtilException, GenerationException {
        if (vocab.isCreateResourceBundlesSet() && vocab.isCreateResourceBundles() || createResourceBundles) {
            Path bundleTarget = bundleOutputDirectory.toPath();
            if (builder.getPackageName() != null) {
                bundleTarget = bundleTarget.resolve(builder.getPackageName().replaceAll("\\.", "/"));
            }
            Files.createDirectories(bundleTarget);

            final HashMap<String, Properties> bundles = builder.generateResourceBundle(className);
            for (String bKey : bundles.keySet()) {
                try (final Writer out = new OutputStreamWriter(
                        buildContext.newFileOutputStream(bundleTarget.resolve(bKey + ".properties").toFile()), StandardCharsets.UTF_8)) {
                    getLog().info(String.format("    Generating ResourceBundle: %s", bKey));
                    bundles.get(bKey).store(out, String.format("Generated by %s:%s v%s (%s)",
                            pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(), pluginDescriptor.getVersion(), pluginDescriptor.getName()));
                }
            }

            if (!outputDirAdded) {
                Resource rsc = new Resource();
                rsc.setDirectory(bundleOutputDirectory.getAbsolutePath());
                rsc.setFiltering(false);
                getLog().debug(String.format("Adding %s as additional resource folder", rsc));
                project.addResource(rsc);
                outputDirAdded = true;
            }

            getLog().info(String.format("Generated %s Resource Bundle", displayName));
        }
    }
}
